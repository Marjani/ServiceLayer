//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(MyApp.DataLayer.Context.ApplicationDbContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsb2e6e126e4f740f27aa4a22c2fe32810f4a4ef279c7fdb84caa1679aa2b066c6))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetsb2e6e126e4f740f27aa4a22c2fe32810f4a4ef279c7fdb84caa1679aa2b066c6 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "b2e6e126e4f740f27aa4a22c2fe32810f4a4ef279c7fdb84caa1679aa2b066c6"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Role")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.RoleClaim")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.User")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.UserClaim")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.UserLogin")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.UserToken")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.UserUsedPassword")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.UserRole")
            {
                return GetView7();
            }

            if (extentName == "ApplicationDbContext.Roles")
            {
                return GetView8();
            }

            if (extentName == "ApplicationDbContext.RoleClaims")
            {
                return GetView9();
            }

            if (extentName == "ApplicationDbContext.Users")
            {
                return GetView10();
            }

            if (extentName == "ApplicationDbContext.UserClaims")
            {
                return GetView11();
            }

            if (extentName == "ApplicationDbContext.UserLogins")
            {
                return GetView12();
            }

            if (extentName == "ApplicationDbContext.UserTokens")
            {
                return GetView13();
            }

            if (extentName == "ApplicationDbContext.UserUsedPasswords")
            {
                return GetView14();
            }

            if (extentName == "ApplicationDbContext.User_Roles")
            {
                return GetView15();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Role.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Role
        [CodeFirstDatabaseSchema.Role](T1.Role_Id, T1.Role_Name, T1.Role_Description, T1.Role_IsActive, T1.Role_IsSystemEntry, T1.Role_CreationDateTime, T1.Role_LastModificationDateTime, T1.Role_CreatorIp, T1.Role_LastModifierIp, T1.Role_CreatorBrowserName, T1.Role_LastModifierBrowserName, T1.Role_LastModifierUserId, T1.Role_CreatorUserId, T1.Role_RowVersion)
    FROM (
        SELECT 
            T.Id AS Role_Id, 
            T.Name AS Role_Name, 
            T.Description AS Role_Description, 
            T.IsActive AS Role_IsActive, 
            T.IsSystemEntry AS Role_IsSystemEntry, 
            T.CreationDateTime AS Role_CreationDateTime, 
            T.LastModificationDateTime AS Role_LastModificationDateTime, 
            T.CreatorIp AS Role_CreatorIp, 
            T.LastModifierIp AS Role_LastModifierIp, 
            T.CreatorBrowserName AS Role_CreatorBrowserName, 
            T.LastModifierBrowserName AS Role_LastModifierBrowserName, 
            T.LastModifierUserId AS Role_LastModifierUserId, 
            T.CreatorUserId AS Role_CreatorUserId, 
            T.RowVersion AS Role_RowVersion, 
            True AS _from0
        FROM ApplicationDbContext.Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.RoleClaim.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RoleClaim
        [CodeFirstDatabaseSchema.RoleClaim](T1.RoleClaim_Id, T1.RoleClaim_ClaimType, T1.RoleClaim_ClaimValue, T1.RoleClaim_RoleId, T1.RoleClaim_RowVersion)
    FROM (
        SELECT 
            T.Id AS RoleClaim_Id, 
            T.ClaimType AS RoleClaim_ClaimType, 
            T.ClaimValue AS RoleClaim_ClaimValue, 
            T.RoleId AS RoleClaim_RoleId, 
            T.RowVersion AS RoleClaim_RowVersion, 
            True AS _from0
        FROM ApplicationDbContext.RoleClaims AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User
        [CodeFirstDatabaseSchema.User](T1.User_Id, T1.User_FirstName, T1.User_LastName, T1.User_UserName, T1.User_NormalizedUserName, T1.User_Email, T1.User_NormalizedEmail, T1.User_EmailConfirmed, T1.User_PasswordHash, T1.User_SecurityStamp, T1.User_PhoneNumber, T1.User_PhoneNumberConfirmed, T1.User_TwoFactorEnabled, T1.User_LockoutEndDateTime, T1.User_LockoutEnabled, T1.User_AccessFailedCount, T1.User_IsActive, T1.User_IsSystemEntry, T1.User_LastVisitDateTime, T1.User_PhotoFileName, T1.User_BirthDate, T1.User_RegisterationDateTime, T1.User_LastLoggedInDateTime, T1.User_CreationDateTime, T1.User_LastModificationDateTime, T1.User_CreatorIp, T1.User_LastModifierIp, T1.User_CreatorBrowserName, T1.User_LastModifierBrowserName, T1.User_LastModifierUserId, T1.User_CreatorUserId, T1.User_RowVersion)
    FROM (
        SELECT 
            T.Id AS User_Id, 
            T.FirstName AS User_FirstName, 
            T.LastName AS User_LastName, 
            T.UserName AS User_UserName, 
            T.NormalizedUserName AS User_NormalizedUserName, 
            T.Email AS User_Email, 
            T.NormalizedEmail AS User_NormalizedEmail, 
            T.EmailConfirmed AS User_EmailConfirmed, 
            T.PasswordHash AS User_PasswordHash, 
            T.SecurityStamp AS User_SecurityStamp, 
            T.PhoneNumber AS User_PhoneNumber, 
            T.PhoneNumberConfirmed AS User_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS User_TwoFactorEnabled, 
            T.LockoutEndDateTime AS User_LockoutEndDateTime, 
            T.LockoutEnabled AS User_LockoutEnabled, 
            T.AccessFailedCount AS User_AccessFailedCount, 
            T.IsActive AS User_IsActive, 
            T.IsSystemEntry AS User_IsSystemEntry, 
            T.LastVisitDateTime AS User_LastVisitDateTime, 
            T.PhotoFileName AS User_PhotoFileName, 
            T.BirthDate AS User_BirthDate, 
            T.RegisterationDateTime AS User_RegisterationDateTime, 
            T.LastLoggedInDateTime AS User_LastLoggedInDateTime, 
            T.CreationDateTime AS User_CreationDateTime, 
            T.LastModificationDateTime AS User_LastModificationDateTime, 
            T.CreatorIp AS User_CreatorIp, 
            T.LastModifierIp AS User_LastModifierIp, 
            T.CreatorBrowserName AS User_CreatorBrowserName, 
            T.LastModifierBrowserName AS User_LastModifierBrowserName, 
            T.LastModifierUserId AS User_LastModifierUserId, 
            T.CreatorUserId AS User_CreatorUserId, 
            T.RowVersion AS User_RowVersion, 
            True AS _from0
        FROM ApplicationDbContext.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserClaim.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserClaim
        [CodeFirstDatabaseSchema.UserClaim](T1.UserClaim_Id, T1.UserClaim_ClaimType, T1.UserClaim_ClaimValue, T1.UserClaim_UserId, T1.UserClaim_RowVersion)
    FROM (
        SELECT 
            T.Id AS UserClaim_Id, 
            T.ClaimType AS UserClaim_ClaimType, 
            T.ClaimValue AS UserClaim_ClaimValue, 
            T.UserId AS UserClaim_UserId, 
            T.RowVersion AS UserClaim_RowVersion, 
            True AS _from0
        FROM ApplicationDbContext.UserClaims AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserLogin.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserLogin
        [CodeFirstDatabaseSchema.UserLogin](T1.UserLogin_Id, T1.UserLogin_LoginProvider, T1.UserLogin_ProviderKey, T1.UserLogin_UserId, T1.UserLogin_RowVersion)
    FROM (
        SELECT 
            T.Id AS UserLogin_Id, 
            T.LoginProvider AS UserLogin_LoginProvider, 
            T.ProviderKey AS UserLogin_ProviderKey, 
            T.UserId AS UserLogin_UserId, 
            T.RowVersion AS UserLogin_RowVersion, 
            True AS _from0
        FROM ApplicationDbContext.UserLogins AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserToken.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserToken
        [CodeFirstDatabaseSchema.UserToken](T1.UserToken_Id, T1.UserToken_UserId, T1.UserToken_RowVersion)
    FROM (
        SELECT 
            T.Id AS UserToken_Id, 
            T.UserId AS UserToken_UserId, 
            T.RowVersion AS UserToken_RowVersion, 
            True AS _from0
        FROM ApplicationDbContext.UserTokens AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserUsedPassword.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserUsedPassword
        [CodeFirstDatabaseSchema.UserUsedPassword](T1.UserUsedPassword_Id, T1.UserUsedPassword_HashedPassword, T1.UserUsedPassword_UserId, T1.UserUsedPassword_RowVersion)
    FROM (
        SELECT 
            T.Id AS UserUsedPassword_Id, 
            T.HashedPassword AS UserUsedPassword_HashedPassword, 
            T.UserId AS UserUsedPassword_UserId, 
            T.RowVersion AS UserUsedPassword_RowVersion, 
            True AS _from0
        FROM ApplicationDbContext.UserUsedPasswords AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserRole
        [CodeFirstDatabaseSchema.UserRole](T1.UserRole_RoleId, T1.UserRole_UserId)
    FROM (
        SELECT 
            Key(T.User_Roles_Source).Id AS UserRole_RoleId, 
            Key(T.User_Roles_Target).Id AS UserRole_UserId, 
            True AS _from0
        FROM ApplicationDbContext.User_Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Roles
        [MyApp.DataLayer.Context.Role](T1.Role_Id, T1.Role_Name, T1.Role_Description, T1.Role_IsActive, T1.Role_IsSystemEntry, T1.Role_CreationDateTime, T1.Role_LastModificationDateTime, T1.Role_CreatorIp, T1.Role_LastModifierIp, T1.Role_CreatorBrowserName, T1.Role_LastModifierBrowserName, T1.Role_LastModifierUserId, T1.Role_CreatorUserId, T1.Role_RowVersion)
    FROM (
        SELECT 
            T.Id AS Role_Id, 
            T.Name AS Role_Name, 
            T.Description AS Role_Description, 
            T.IsActive AS Role_IsActive, 
            T.IsSystemEntry AS Role_IsSystemEntry, 
            T.CreationDateTime AS Role_CreationDateTime, 
            T.LastModificationDateTime AS Role_LastModificationDateTime, 
            T.CreatorIp AS Role_CreatorIp, 
            T.LastModifierIp AS Role_LastModifierIp, 
            T.CreatorBrowserName AS Role_CreatorBrowserName, 
            T.LastModifierBrowserName AS Role_LastModifierBrowserName, 
            T.LastModifierUserId AS Role_LastModifierUserId, 
            T.CreatorUserId AS Role_CreatorUserId, 
            T.RowVersion AS Role_RowVersion, 
            True AS _from0
        FROM CodeFirstDatabase.Role AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.RoleClaims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RoleClaims
        [MyApp.DataLayer.Context.RoleClaim](T1.RoleClaim_Id, T1.RoleClaim_ClaimType, T1.RoleClaim_ClaimValue, T1.RoleClaim_RoleId, T1.RoleClaim_RowVersion)
    FROM (
        SELECT 
            T.Id AS RoleClaim_Id, 
            T.ClaimType AS RoleClaim_ClaimType, 
            T.ClaimValue AS RoleClaim_ClaimValue, 
            T.RoleId AS RoleClaim_RoleId, 
            T.RowVersion AS RoleClaim_RowVersion, 
            True AS _from0
        FROM CodeFirstDatabase.RoleClaim AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [MyApp.DataLayer.Context.User](T1.User_Id, T1.User_FirstName, T1.User_LastName, T1.User_UserName, T1.User_NormalizedUserName, T1.User_Email, T1.User_NormalizedEmail, T1.User_EmailConfirmed, T1.User_PasswordHash, T1.User_SecurityStamp, T1.User_PhoneNumber, T1.User_PhoneNumberConfirmed, T1.User_TwoFactorEnabled, T1.User_LockoutEndDateTime, T1.User_LockoutEnabled, T1.User_AccessFailedCount, T1.User_IsActive, T1.User_IsSystemEntry, T1.User_LastVisitDateTime, T1.User_PhotoFileName, T1.User_BirthDate, T1.User_RegisterationDateTime, T1.User_LastLoggedInDateTime, T1.User_CreationDateTime, T1.User_LastModificationDateTime, T1.User_CreatorIp, T1.User_LastModifierIp, T1.User_CreatorBrowserName, T1.User_LastModifierBrowserName, T1.User_LastModifierUserId, T1.User_CreatorUserId, T1.User_RowVersion)
    FROM (
        SELECT 
            T.Id AS User_Id, 
            T.FirstName AS User_FirstName, 
            T.LastName AS User_LastName, 
            T.UserName AS User_UserName, 
            T.NormalizedUserName AS User_NormalizedUserName, 
            T.Email AS User_Email, 
            T.NormalizedEmail AS User_NormalizedEmail, 
            T.EmailConfirmed AS User_EmailConfirmed, 
            T.PasswordHash AS User_PasswordHash, 
            T.SecurityStamp AS User_SecurityStamp, 
            T.PhoneNumber AS User_PhoneNumber, 
            T.PhoneNumberConfirmed AS User_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS User_TwoFactorEnabled, 
            T.LockoutEndDateTime AS User_LockoutEndDateTime, 
            T.LockoutEnabled AS User_LockoutEnabled, 
            T.AccessFailedCount AS User_AccessFailedCount, 
            T.IsActive AS User_IsActive, 
            T.IsSystemEntry AS User_IsSystemEntry, 
            T.LastVisitDateTime AS User_LastVisitDateTime, 
            T.PhotoFileName AS User_PhotoFileName, 
            T.BirthDate AS User_BirthDate, 
            T.RegisterationDateTime AS User_RegisterationDateTime, 
            T.LastLoggedInDateTime AS User_LastLoggedInDateTime, 
            T.CreationDateTime AS User_CreationDateTime, 
            T.LastModificationDateTime AS User_LastModificationDateTime, 
            T.CreatorIp AS User_CreatorIp, 
            T.LastModifierIp AS User_LastModifierIp, 
            T.CreatorBrowserName AS User_CreatorBrowserName, 
            T.LastModifierBrowserName AS User_LastModifierBrowserName, 
            T.LastModifierUserId AS User_LastModifierUserId, 
            T.CreatorUserId AS User_CreatorUserId, 
            T.RowVersion AS User_RowVersion, 
            True AS _from0
        FROM CodeFirstDatabase.User AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.UserClaims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserClaims
        [MyApp.DataLayer.Context.UserClaim](T1.UserClaim_Id, T1.UserClaim_ClaimType, T1.UserClaim_ClaimValue, T1.UserClaim_UserId, T1.UserClaim_RowVersion)
    FROM (
        SELECT 
            T.Id AS UserClaim_Id, 
            T.ClaimType AS UserClaim_ClaimType, 
            T.ClaimValue AS UserClaim_ClaimValue, 
            T.UserId AS UserClaim_UserId, 
            T.RowVersion AS UserClaim_RowVersion, 
            True AS _from0
        FROM CodeFirstDatabase.UserClaim AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.UserLogins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserLogins
        [MyApp.DataLayer.Context.UserLogin](T1.UserLogin_Id, T1.UserLogin_LoginProvider, T1.UserLogin_ProviderKey, T1.UserLogin_UserId, T1.UserLogin_RowVersion)
    FROM (
        SELECT 
            T.Id AS UserLogin_Id, 
            T.LoginProvider AS UserLogin_LoginProvider, 
            T.ProviderKey AS UserLogin_ProviderKey, 
            T.UserId AS UserLogin_UserId, 
            T.RowVersion AS UserLogin_RowVersion, 
            True AS _from0
        FROM CodeFirstDatabase.UserLogin AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.UserTokens.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserTokens
        [MyApp.DataLayer.Context.UserToken](T1.UserToken_Id, T1.UserToken_UserId, T1.UserToken_RowVersion)
    FROM (
        SELECT 
            T.Id AS UserToken_Id, 
            T.UserId AS UserToken_UserId, 
            T.RowVersion AS UserToken_RowVersion, 
            True AS _from0
        FROM CodeFirstDatabase.UserToken AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.UserUsedPasswords.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserUsedPasswords
        [MyApp.DataLayer.Context.UserUsedPassword](T1.UserUsedPassword_Id, T1.UserUsedPassword_HashedPassword, T1.UserUsedPassword_UserId, T1.UserUsedPassword_RowVersion)
    FROM (
        SELECT 
            T.Id AS UserUsedPassword_Id, 
            T.HashedPassword AS UserUsedPassword_HashedPassword, 
            T.UserId AS UserUsedPassword_UserId, 
            T.RowVersion AS UserUsedPassword_RowVersion, 
            True AS _from0
        FROM CodeFirstDatabase.UserUsedPassword AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.User_Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User_Roles
        [MyApp.DataLayer.Context.User_Roles](T3.[User_Roles.User_Roles_Source], T3.[User_Roles.User_Roles_Target])
    FROM (
        SELECT -- Constructing User_Roles_Source
            CreateRef(ApplicationDbContext.Users, row(T2.[User_Roles.User_Roles_Source.Id]), [MyApp.DataLayer.Context.User]) AS [User_Roles.User_Roles_Source], 
            T2.[User_Roles.User_Roles_Target]
        FROM (
            SELECT -- Constructing User_Roles_Target
                T1.[User_Roles.User_Roles_Source.Id], 
                CreateRef(ApplicationDbContext.Roles, row(T1.[User_Roles.User_Roles_Target.Id]), [MyApp.DataLayer.Context.Role]) AS [User_Roles.User_Roles_Target]
            FROM (
                SELECT 
                    T.RoleId AS [User_Roles.User_Roles_Source.Id], 
                    T.UserId AS [User_Roles.User_Roles_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.UserRole AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
